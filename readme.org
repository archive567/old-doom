#+TITLE: Doom Emacs Configuration

* Non-standard binding summary

| key         | command                      |
|-------------+------------------------------|
| ~v~ ~V~         | expands and contracts region |
| ~SPC s f~     | consult-find                 |
| ~SPC s y~     | consult-yank-from-kill-ring  |
| ~M-SPC~       | cycle-spacing                |
| ~M-j~         | avy-goto-char-timer          |
| ~SPC m l c~   | org-clip-link                |
| ~gk~ ~gj~       | up and down an org header    |
| ~SPC m m i~   | insert a backlink            |
| ~SPC m m l~   | org-super-links-link         |
| ~SPC m z~     | yank to block commands       |
| ~SPC m l p~   | org-hugo-export-wim-to-md    |
| ~SPC m n~     | flycheck-next-error          |
| ~SPC m p~     | flycheck-previous-error      |
| ~M-w~         | easy-kill                    |
| ~C-x C-d~     | consult-dir                  |
| ~C-x C-j~     | consult-dir-jump-file        |
| ~M-up~ ~M-down~ | Move line up/down            |
| ~C-;~         | embark-act                   |
| ~SPC d d~     | dirvish-dired                |
|             |                              |
| ~SPC t m~     | style/max-frame              |
| ~SPC t d~     | style/default-frame          |

* Configuration Examples

Most of my doom config, and much of my work flow has been put together from reading and stealing from other configs.

A useful technique is to do an advanced github search of these repos, together with the main doom-emacs repository. An example:
[[https://github.com/search?q=org-modern+repo%3Adoomemacs%2Fdoomemacs+repo%3Ahlissner%2F.doom.d+repo%3Afloscr%2Femacs.d+repo%3Adangirsh%2F.doom.d%2F+repo%3ALemonBreezes%2F.doom.d+repo%3Azzamboni%2Fdot-emacs+repo%3Ajethrokuan%2Fdots+repo%3Asachac%2F.emacs.d%2F+repo%3Adaviwil%2Fdotfiles+repo%3Afrap%2Femacs-literate+repo%3AMatthewZMD%2F.emacs.d+repo%3Akarthink%2F.emacs.d&type=Code][Example search on org-modern]]

** YouTube

[[https://www.youtube.com/c/SystemCrafters/videos][System Crafters - YouTube]]

[[https://www.youtube.com/channel/UCzgkOWKcwy0uhYilE6bd1Lg][Zaiste Programming - YouTube]]

[[https://www.youtube.com/channel/UCVls1GmFKf6WlTraIb_IaJg][DistroTube - YouTube]]

** doom-centric

[[https://github.com/LemonBreezes/.doom.d][GitHub - LemonBreezes/.doom.d: My private doom-emacs config]]

[[https://github.com/floscr/emacs.d][GitHub - floscr/emacs.d: My emacs config]]

[[https://github.com/dangirsh/.doom.d][GitHub - dangirsh/.doom.d: A literate Doom Emacs config]]

[[https://github.com/hlissner/doom-emacs-private][GitHub - hlissner/doom-emacs-private: My private module for Doom Emacs]]

[[https://github.com/tecosaur/emacs-config/][GitHub - tecosaur/emacs-config: My configuration for Doom Emacs]]

** from scratch'ish

[[https://zzamboni.org/post/my-emacs-configuration-with-commentary/][zzamboni.org | My Emacs Configuration, With Commentary]]

[[https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el][dots/config.el at master · jethrokuan/dots · GitHub]]

[[https://sachachua.com/dotemacs/][Sacha Chua's Emacs configuration]]

[[https://github.com/daviwil/dotfiles][GitHub - daviwil/dotfiles: The path to GNUrvana
]]
[[https://github.com/frap/emacs-literate][GitHub - frap/emacs-literate: Literate emacs config file]]

[[https://github.com/MatthewZMD/.emacs.d][GitHub - MatthewZMD/.emacs.d: M-EMACS, a full-featured GNU Emacs configuratio...]]

[[https://github.com/karthink/.emacs.d][GitHub - karthink/.emacs.d: My personal emacs settings]]

** gitlab

https://protesilaos.com/emacs/dotemacs

** haskell'ish

[[https://blog.sumtypeofway.com/posts/emacs-config.html][adventures in uncertainty: My Emacs Configuration]]

* Development

** map!

See practical map! usage here:

[[https://github.com/hlissner/doom-emacs/blob/develop/modules/config/default/+evil-bindings.el][doom-emacs/+evil-bindings.el at develop · hlissner/doom-emacs · GitHub]]

** Key Detection Checklist

- inspect the key with ~SPC h k~. Look for which keymaps are binding.
- inspect the keymap with ~SPC h v~.
- unbind any existing map with (map! :map xyz-map :inv #'command nil)
- look in module docs (~SPC h d m~)
  - custom keybinds for in the module, such as ~:lang org~.
  - general keybinds for evil in the ~:editor evil~ module
  - doom's "best default" keybinds in ~:config default~
  - module plugins lists to see if we have an evil package for it.
- Look for a module in [[https://github.com/emacs-evil/evil-collection][GitHub - emacs-evil/evil-collection: A set of keybindings for evil-mode]]. This package provides evil defaults for a variety of modes/packages.
- Use ~discover-my-major~

* Front Matter

As per default doom config.el.

[[https://elpa.gnu.org/packages/doc/modus-themes.html#Fringes][Modus themes for GNU Emacs]]
[[https://protesilaos.com/emacs/modus-themes][Modus Themes (Modus Operandi and Modus Vivendi) | Protesilaos Stavrou]]

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; other configuration examples
;;

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Tony Day"
      user-mail-address "tonyday567@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "Iosevka ss02" :size 14 :weight 'light)
;;      doom-variable-pitch-font (font-spec :family "Iosevka etoile" :size 14))
(setq doom-font (font-spec :family "Iosevka")
      doom-variable-pitch-font (font-spec :family "Iosevka Aile"))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-Iosvkem)
(setq doom-theme 'modus-operandi)
;; (doom-themes-org-config)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

#+end_src

* Global tweaks

Global configuration, including standard doom library tweaks.

** globals

#+begin_src elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t
      confirm-kill-emacs nil
      shift-select-mode t
      window-combination-resize t
      delete-selection-mode t
      case-fold-search t
      auto-save-default t)

(setq search-whitespace-regexp ".*"
      isearch-lax-whitespace t
      isearch-regexp-lax-whitespace nil)

;; setq-default sets variables that are usually local to buffers
(setq-default truncate-lines nil
              indent-tabs-mode nil)

#+end_src

** evil

#+begin_src elisp
(map!
 (:map 'override
   :v "v" #'er/expand-region
   :v "V" #'er/contract-region))
(map!
 (:map 'override
   :m "j" #'evil-next-visual-line
   :m "k" #'evil-previous-visual-line))
#+end_src

#+begin_src elisp
(setq evil-want-fine-undo t
      evil-kill-on-visual-paste nil
      evil-want-C-u-scroll nil
      evil-want-C-u-delete nil
      evil-want-integration t
      evil-want-keybinding nil
      evil-move-cursor-back nil
      evil-move-beyond-eol t
      evil-highlight-closing-paren-at-point-states nil)
#+end_src

#+begin_src elisp
(defun evil-forward-after-end (thing &optional count)
  "Move forward to end of THING.
The motion is repeated COUNT times."
  (setq count (or count 1))
  (cond
   ((> count 0)
    (forward-thing thing count))
   (t
    (unless (bobp) (forward-char -1))
    (let ((bnd (bounds-of-thing-at-point thing))
          rest)
      (when bnd
        (cond
         ((< (point) (cdr bnd)) (goto-char (car bnd)))
         ((= (point) (cdr bnd)) (cl-incf count))))
      (condition-case nil
          (when (zerop
                 (setq rest
                       (forward-thing thing count)))
            (end-of-thing thing))
        (error))
      rest))))

(evil-define-motion evil-forward-after-word-end (count &optional bigword)
  "Move the cursor to the end of the COUNT-th next word.
If BIGWORD is non-nil, move by WORDS."
  :type inclusive
  (let ((thing (if bigword 'evil-WORD 'evil-word))
        (count (or count 1)))
    (evil-signal-at-bob-or-eob count)
    (evil-forward-after-end thing count)))

(evil-define-motion evil-forward-after-WORD-end (count)
  "Move the cursor to the end of the COUNT-th next WORD."
  :type inclusive
  (evil-forward-after-word-end count t))

(evil-define-key 'motion 'global "e"  #'evil-forward-after-word-end)
(evil-define-key 'motion 'global "E"  #'evil-forward-after-WORD-end)
#+end_src

** standard library tweaks

#+begin_src elisp
(setq vertico-sort-function #'vertico-sort-history-alpha)
(setq avy-all-windows t)
#+end_src

#+begin_src elisp
(map! :leader "s f" #'consult-find)
(map! :leader "s y" #'consult-yank-from-kill-ring)
#+end_src

#+begin_src elisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src


#+begin_src elisp
(define-key isearch-mode-map (kbd "M-j") 'avy-isearch)

(defun isearch-forward-other-window (prefix)
    "Function to isearch-forward in other-window."
    (interactive "P")
    (unless (one-window-p)
      (save-excursion
        (let ((next (if prefix -1 1)))
          (other-window next)
          (isearch-forward)
          (other-window (- next))))))

(defun isearch-backward-other-window (prefix)
  "Function to isearch-backward in other-window."
  (interactive "P")
  (unless (one-window-p)
    (save-excursion
      (let ((next (if prefix 1 -1)))
        (other-window next)
        (isearch-backward)
        (other-window (- next))))))

(define-key global-map (kbd "C-M-s") 'isearch-forward-other-window)
(define-key global-map (kbd "C-M-r") 'isearch-backward-other-window)
#+end_src

** Post-dashboard tweak to increase frame.

#+begin_src elisp
(defun style/left-frame ()
  (interactive)
  (cond
   ((string-equal system-type "windows-nt") ; Microsoft Windows
    (progn
      (set-frame-parameter (selected-frame) 'fullscreen nil)
      (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'top 10)
      (set-frame-parameter (selected-frame) 'left 6)
      (set-frame-parameter (selected-frame) 'height 40)
      (set-frame-parameter (selected-frame) 'width 120)))
   ((string-equal system-type "darwin") ; Mac OS X
    (progn
      (set-frame-parameter (selected-frame) 'fullscreen nil)
      (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil)
      (set-frame-parameter (selected-frame) 'top 23)
      (set-frame-parameter (selected-frame) 'left 0)
      (set-frame-parameter (selected-frame) 'height 44)
      (set-frame-parameter (selected-frame) 'width 100)
      (message "default-frame set")))
   ((string-equal system-type "gnu/linux") ; linux
    (progn
      (message "Linux")))))

(add-to-list 'initial-frame-alist '(top . 23))
(add-to-list 'initial-frame-alist '(left . 0))
(add-to-list 'initial-frame-alist '(height . 44))
(add-to-list 'initial-frame-alist '(width . 100))

(defun style/max-frame ()
  (interactive)
  (if t
      (progn
        (set-frame-parameter (selected-frame) 'fullscreen 'fullboth)
        (set-frame-parameter (selected-frame) 'vertical-scroll-bars nil)
        (set-frame-parameter (selected-frame) 'horizontal-scroll-bars nil))
    (set-frame-parameter (selected-frame) 'top 26)
    (set-frame-parameter (selected-frame) 'left 2)
    (set-frame-parameter (selected-frame) 'width
                         (floor (/ (float (x-display-pixel-width)) 9.15)))
    (if (= 1050 (x-display-pixel-height))
        (set-frame-parameter (selected-frame) 'height
                             (if (>= emacs-major-version 24)
                                 66
                               55))
      (set-frame-parameter (selected-frame) 'height
                           (if (>= emacs-major-version 24)
                               75
                             64)))))

(style/left-frame)  ;; Focus new window after splitting
(map!
   :leader
   :nvm "tm" #'style/max-frame
   :nvm "td" #'style/left-frame)
#+end_src

* Keys
** global keybindings

#+begin_src elisp
;; replaces just-one-space
(map! "M-SPC" #'cycle-spacing)
(map! :map global-map "M-j" #'avy-goto-char-timer)
#+end_src

#+begin_src elisp
(map! (:after evil-org
       :map evil-org-mode-map
       :inv "M-j" nil))
#+end_src

** discover-my-major

[[https://github.com/jguenther/discover-my-major][GitHub - jguenther/discover-my-major: Discover key bindings and their meaning...]]

#+begin_src elisp
(use-package! discover-my-major)
#+end_src

* Org
:BACKLINKS:
[2021-12-30 Thu 14:15] <- [[file:~/org/stuff.org::*stack revival][stack revival]]
:END:

** org-capture

#+begin_src elisp
(after! org
  (setq
   org-capture-templates
   (quote
    (("r" "refile" entry
      (file "~/org/refile.org")
      "* ToDo %?
")
     ("s" "stack" checkitem
      (file+headline "~/org/stuff.org" "stack")
      "- %?
  %a" :prepend t)
     ("z" "bugz" entry
      (file+headline "~/org/bugz.org" "bugz!")
      "* ToDo %?
%a")))))

#+end_src

#+RESULTS:
| r | refile | entry | (file ~/org/refile.org)              | * ToDo %? |
| z | bugz   | entry | (file+headline ~/org/bugz.org bugz!) | * ToDo %? |

** general tweaks

#+begin_src elisp
(after! org
  :config
  (setq
   org-startup-folded 'overview
   org-support-shift-select t
   org-insert-heading-respect-content t
   org-ellipsis " [...] "
   org-startup-with-inline-images t
   org-cycle-include-plain-lists 'integrate
   ;; https://github.com/syl20bnr/spacemacs/issues/13465
   org-src-tab-acts-natively nil)
   (remove-hook 'org-mode-hook 'flyspell-mode)
)
 #+end_src

** org keybinds

#+begin_src elisp
(map! (:after evil-org
       :map evil-org-mode-map
       :n "gk" (cmd! (if (org-on-heading-p)
                         (org-backward-element)
                       (evil-previous-visual-line)))
       :n "gj" (cmd! (if (org-on-heading-p)
                         (org-forward-element)
                       (evil-next-visual-line)))))
#+end_src

#+RESULTS:

** org-super-links

[[file:~/org/emacs.org::*backlinks][backlinks]]

~org-roam~ gets too far away from life in plain text.  90% of the benefit is backlinks, which org-super-links provides.

[[https://github.com/toshism/org-super-links][GitHub - toshism/org-super-links: Package to create links with auto backlinks]]

In an org file, a capture automatically generates a super-link, so ~SPC m m i~ would insert a backlink in the item.

~SPC m m l~

#+begin_src elisp
(use-package! org-super-links
  :config
  (map! :map org-mode-map
        :localleader
        (:prefix ("m" . "backlinks")
         :nvm "l" #'org-super-links-link
         :nvm "s" #'org-super-links-store-link
         :nvm "i" #'org-super-links-insert-link
         :nvm "d" #'org-super-links-delete-link
         :nvm "c" #'org-super-links-convert-link-to-super)))
#+end_src

** org-agenda
:BACKLINKS:
[2021-12-30 Thu 14:11] <- [[file:~/org/refile.org::*categories for the agenda][categories for the agenda]]
:END:

*** org-agenda-files

Keeping a manual list to avoid using customize.

#+begin_src elisp
(after! org-agenda
  :config
  (setq org-agenda-files
   '("~/org")))
#+end_src

*** customs

#+begin_src elisp
(after! org-agenda
  :config
  (setq org-agenda-span 'week
        org-agenda-use-time-grid nil
        org-agenda-start-day "-0d"
        org-agenda-block-separator nil
        org-agenda-show-future-repeats nil
        org-agenda-compact-blocks t
        org-agenda-show-all-dates nil
        org-agenda-prefix-format
         '((agenda . " %-12t")
           (todo . " %-12:c")
           (tags . " %-12:c")
           (search . " %-12:c")))
  (add-to-list 'org-modules 'org-habit)
  (require 'org-habit)
  (setq org-habit-graph-column 32)
  (setq org-habit-following-days 2)
  (setq org-habit-preceding-days 20)
  (setq org-log-into-drawer t)
  (map! :leader "oz" #'agenda-z)
  (map! :map org-agenda-mode-map
        :localleader
        (:nvm "l" #'org-agenda-log-mode
         :nvm "j" #'org-random-todo-goto-new
         :nvm "h" #'org-agenda-habit-mode)))

(defun agenda-z ()
  (interactive)
  (org-agenda nil "z"))

(defun org-agenda-habit-mode (&optional junk)
  "Toggle showing all habits."
  (interactive "P")
  (setq org-habit-show-all-today (not org-habit-show-all-today))
  (org-agenda-redo)
  (message "All habits are %s" (if org-habit-show-all-today "on" "off")))

#+end_src

** org-super-agenda

[[https://github.com/alphapapa/org-super-agenda/blob/master/examples.org][org-super-agenda/examples.org at master · alphapapa/org-super-agenda · GitHub]]

#+begin_src elisp

(defun make-qsags ()
 (-let* (((m d y) (calendar-gregorian-from-absolute (+ 6 (org-today))))
           (target-date (format "%d-%02d-%02d" y m d))
        )
  (setq org-super-agenda-groups
         `(
           (:name "clocked"
            :log clock)
           (:name "next"
            :todo "Next")
           (:name "refile"
            :category "refile")
           (:name "blocked"
            :todo "Blocked")
           (:name "fun"
            :and (:scheduled nil
                  :not (:log clock)
                  :tag ("fun"))
            :discard (:habit t))
           (:name "lemon"
            :and (:scheduled nil
                  :not (:log clock)
                  :tag ("lemon"))
            :discard (:habit t))
           (:name "site"
            :and (:scheduled nil
                  :not (:log clock)
                  :tag ("site"))
            :discard (:habit t))
           (:name "reading"
            :and (:scheduled nil
                  :not (:log clock)
                  :tag ("reading"))
            :discard (:habit t))
           (:name "repo"
            :and (:scheduled nil
                  :not (:log clock)
                  :tag ("repo"))
            :discard (:habit t))

           (:name "stuff"
            :and (:scheduled nil
                  :not (:log clock)
                  :not (:tag ("ignore")))
            :discard (:habit t))
           (:name "a while"
            :scheduled (after ,target-date)
            :discard (:scheduled t))
           (:name "scheduled"
            :scheduled t
            :discard (:habit t)
            :order 9)
           (:name "errors")
          ))))

(use-package! org-super-agenda
  :config
   (use-package origami
    :bind (:map org-super-agenda-header-map
            ("<tab>" . origami-toggle-node)
            ("j" . evil-next-visual-line)
            ("k" . evil-previous-visual-line))
    :hook ((org-agenda-mode . origami-mode)))
   (make-qsags)
   (org-super-agenda-mode 1)
   (setq org-agenda-custom-commands
         '(("z" "custom agenda"
            ((agenda "" ((org-agenda-span 'week)
                         (org-super-agenda-groups nil)
                         (org-agenda-overriding-header "")))
             (alltodo "" ((org-agenda-overriding-header "")
                          )))))))
#+end_src

** babel
#+begin_src elisp
(after! org
  :config
  (defun display-ansi-colors ()
    (interactive)
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))
   (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

   (map! :map org-mode-map
         :localleader
         (:prefix ("z" . "yank to block")
          :nvm "b" #'org-yank-into-new-block
          :nvm "e" #'org-yank-into-new-block-elisp
          :nvm "s" #'org-yank-into-new-block-sh
          :nvm "h" #'org-yank-into-new-block-haskell
          :nvm "q" #'org-yank-into-new-quote)))

(defun org-yank-into-new-block (&optional template)
    (interactive)
    (let ((begin (point))
          done)
      (unwind-protect
          (progn
            (end-of-line)
            (yank)
            (push-mark begin)
            (setq mark-active t)
            (if template
             (org-insert-structure-template template)
             (call-interactively #'org-insert-structure-template))
            (setq done t)
            (deactivate-mark)
            (let ((case-fold-search t))
              (re-search-forward (rx bol "#+END_")))
            (forward-line 1))
        (unless done
          (deactivate-mark)
          (delete-region begin (point))))))

(defun org-yank-into-new-block-elisp ()
  (interactive)
  (org-yank-into-new-block "src elisp"))

(defun org-yank-into-new-block-sh ()
  (interactive)
  (org-yank-into-new-block "src sh"))

(defun org-yank-into-new-block-haskell ()
  (interactive)
  (org-yank-into-new-block "src haskell"))

(defun org-yank-into-new-quote ()
  (interactive)
  (org-yank-into-new-block "quote"))
#+end_src

** hugo

docs: [[https://ox-hugo.scripter.co/][ox-hugo - Org to Hugo exporter]]

~backtrace~ bug:
https://github.com/hlissner/doom-emacs/issues/5721#issuecomment-958342837

Setup is section-based. To add a post:

- add export_file_name to the properties.
#+begin_quote
:PROPERTIES:
:EXPORT_FILE_NAME: test2
:END:
#+end_quote

- add auto save at the bottom of the file:

  #+begin_quote
 * Locals

# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
#+end_quote

A ToDo in the header makes the post a draft.

#+begin_src elisp
(after! org
  :config
  (use-package backtrace)
  (setq org-hugo-base-dir "~/site"
        org-hugo-auto-set-lastmod t
        org-hugo-use-code-for-kbd t
        org-hugo-date-format "%Y-%m-%d")
    (map! :map org-mode-map
        :localleader
        (:nvm "lp" #'org-hugo-export-wim-to-md)))
#+end_src

** org-random-todo

[[https://github.com/unhammer/org-random-todo][GitHub - unhammer/org-random-todo: 🍃 Pop up a random TODO from your agenda ev...]]

#+begin_src elisp
(after! org
  (use-package! org-random-todo
    :defer-incrementally t
    :commands (org-random-todo-goto-new)
    :config
    (map! :map org-mode-map
        :localleader
        (:nvm "j" #'org-random-todo-goto-new))))
#+end_src

** org-modern (new)

[[https://github.com/minad/org-modern][GitHub - minad/org-modern: Modern Org Style]]

#+begin_src elisp
(use-package! org-modern
  :config
  (modify-all-frames-parameters
   '((right-divider-width . 10)
     (internal-border-width . 10)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
  (setq
   ;; Edit settings
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"
   org-agenda-tags-column 0
   org-agenda-block-separator ?─)

   (set-face-attribute 'default nil :family "Iosevka")
   (set-face-attribute 'variable-pitch nil :family "Iosevka Aile")
   (set-face-attribute 'org-modern-symbol nil :family "Iosevka")

   ;; (set-face-attribute 'org-block-begin-line nil :background nil)
   ;; (set-face-attribute 'org-block-end-line nil :background nil)
   ;; (set-face-attribute 'org-modern-label nil :box '(:line-width 4 :color (face-background 'default)))
   (setq org-modern-label-border 0)
   (setq org-startup-indented nil)
   ;; (setq-default electric-indent-mode nil)
   (setq-default org-todo-keywords '((sequence "ToDo(t)" "Next(n)" "Blocked(b)" "|" "Done(d!)")))
   (setq-local line-spacing 0.2)
   (global-org-modern-mode)
   )
#+end_src

[[https://github.com/LemonBreezes/.doom.d/blob/ce425f1f5798411888860ec269b7aa02932d8ffb/lisp/set-up-theme-stuff.el][.doom.d/set-up-theme-stuff.el at ce425f1f5798411888860ec269b7aa02932d8ffb · L...]]

#+begin_src elisp :tangle no
(defun my-set-face-bg-fg-inverse-video (face bg fg)
  (set-face-attribute face nil :inverse-video t)
  (set-face-foreground face bg)
  (set-face-background face fg))

(after! org
  (set-face-foreground 'org-todo (face-foreground 'outline-1 nil t))
  (after! org-modern
    (my-set-face-bg-fg-inverse-video 'org-modern-done
                                     (face-foreground 'org-headline-done nil t)
                                     (alist-get 'background-color (frame-parameters)))
    (set-face-attribute 'org-modern-done nil :weight 'semibold)
    (my-set-face-bg-fg-inverse-video 'org-modern-time-inactive
                                     "gray50"
                                     (if (< (color-distance (alist-get 'background-color (frame-parameters))
                                                            "gray95")
                                            face-near-same-color-threshold)
                                         "gray95"
                                       "gray5"))
    (my-set-face-bg-fg-inverse-video 'org-modern-tag
                                     (face-foreground 'org-level-1 nil t)
                                     (alist-get 'background-color (frame-parameters)))
    (cl-loop for buf being the buffers do
             (when (buffer-local-value 'org-modern-mode buf)
               (with-current-buffer buf
                 (org-modern--update-label-face)))))
  (set-face-attribute 'org-ellipsis nil
                      :inherit '(shadow default)
                      :weight 'normal)
  (set-face-attribute 'org-document-title nil
                      :height 1.2))

(after! modus-themes
  (let ((modus-themes-inhibit-reload t))
    (setq! modus-themes-italic-constructs t
            modus-themes-slanted-constructs t
            modus-themes-bold-constructs nil
            modus-themes-lang-checkers '(faint)
            modus-themes-org-blocks 'gray-background
            modus-themes-mode-line '(3d accented)
            modus-themes-syntax '(alt-syntax green-strings yellow-comments)
            modus-themes-headings '((1 . (1.25 extrabold rainbow))
                                    (2 . (1.15 semibold rainbow))
                                    (3 . (1.12 semibold rainbow))
                                    (4 . (1.09 medium rainbow))
                                    (5 . (1.06 medium rainbow))
                                    (6 . (1.03 medium rainbow))
                                    (7 . (medium rainbow))
                                    (8 . (medium rainbow))
                                    (t . (rainbow)))
            modus-themes-box-buttons '(accented semibold 0.9 faint all-buttons)
            modus-themes-fringes 'intense
            modus-themes-hl-line '()
            modus-themes-intense-mouseovers '(neutral-underline background)
            modus-themes-markup '(intense italic)
            modus-themes-paren-match '(intense)
            modus-themes-prompts '(intense bold)
            modus-themes-region '(accented bg-only)
            modus-themes-subtle-line-numbers nil
            modus-themes-tabs-accented t
            modus-themes-lang-checkers '(straight-underline intense text-also)
            modus-themes-links '(bold)
            modus-themes-completions nil
            modus-themes-mail-citations 'intense
            modus-themes-deuteranopia nil))
  (setq! modus-themes-inhibit-reload nil))
#+end_src

* Deft

#+begin_src elisp
(after! deft
  (setq
   deft-directory "~/org"
   deft-extensions '("org" "txt" "md")
   deft-recursive t
   deft-file-naming-rules
   (quote
    ((noslash . "-")
     (nospace . "-")
     (case-fn . downcase)))
   deft-strip-summary-regexp "\\([
	]\\|^#\\+.+:.*$\\)"
   delete-by-moving-to-trash nil
   ))
#+end_src

* haskell & lsp
:BACKLINKS:
[2021-11-21 Sun 07:55] <- [[file:~/org/haskell-lite.org][file:~/org/haskell-lite.org]]
:END:

#+begin_src elisp
;; haskell
;;
(after! haskell
  (setq
   haskell-font-lock-symbols t
   ;; company-idle-delay 0.5
   haskell-interactive-popup-errors nil
   lsp-enable-folding nil
   lsp-response-timeout 120
   ;; lsp-ui-sideline-enable nil
   lsp-ui-doc-enable nil
   ;; lsp-enable-symbol-highlighting nil
   ;; +lsp-prompt-to-install-server 'quiet
   lsp-modeline-diagnostics-scope :project
   ;; lsp-modeline-code-actions-segments '(count icon)
   flycheck-check-syntax-automatically '(save)
   lsp-haskell-brittany-on nil
   lsp-haskell-floskell-on nil
   lsp-haskell-fourmolu-on nil
   lsp-haskell-stylish-haskell-on nil
   lsp-haskell-retrie-on nil
   ;; lsp-completion-provider :none
   haskell-process-show-debug-tips nil
   haskell-process-suggest-remove-import-lines nil
   haskell-process-suggest-restart nil
   ;;haskell-process-type 'stack-ghci
   haskell-process-type 'cabal-repl
   )
  (global-so-long-mode -1)
  ;; makes underscore an alphanumeric
  (add-hook! 'haskell-mode-hook (modify-syntax-entry ?_ "w")))
#+end_src

#+begin_src elisp
(after! haskell
  (map! :localleader
        :map haskell-mode-map
        "n" #'flycheck-next-error
        "p" #'flycheck-previous-error))
#+end_src

#+begin_src elisp
(map!
  :after company
  :map company-active-map
  "RET" nil
  "<return>" nil
  "<tab>" #'company-complete-selection
  "TAB" #'company-complete-selection)
(setq tab-always-indent 'complete)
#+end_src

#+begin_src elisp
(after! haskell
      (sp-with-modes '(haskell-mode haskell-interactive-mode)
        (sp-local-pair "{-" "-}" :actions :rem)
        (sp-local-pair "{-#" "#-}" :actions :rem)
        (sp-local-pair "{-@" "@-}" :actions :rem)
        (sp-local-pair "{-" "-")
        (sp-local-pair "{-#" "#-")
        (sp-local-pair "{-@" "@-")))
#+end_src

** haskell-lite

#+begin_src elisp
(use-package! fd-haskell)
#+end_src

#+begin_src elisp
(use-package! haskell-lite)
#+end_src

** Tidal

~cabal install tidal --lib~ is the magical incantation.

SuperCompiler start.scd

#+begin_example
Server.local.options.sampleRate = 44100;
SuperDirt.start;
s.reboot
#+end_example

#+begin_src elisp
(use-package! tidal
    :init
    (progn
      ;; (setq tidal-interpreter "ghci")
      ;; (setq tidal-interpreter-arguments (list "ghci" "-XOverloadedStrings" "-package" "tidal"))
      ;; (setq tidal-boot-script-path "~/.emacs.doom/.local/straight/repos/Tidal/BootTidal.hs")
      ))
#+end_src

** haskell-snippets

#+begin_src elisp
(use-package! haskell-snippets
  :after (haskell-mode yasnippet))
#+end_src

* Non-standard packages
** easy-kill

[[https://github.com/leoliu/easy-kill][GitHub - leoliu/easy-kill: Kill & Mark Things Easily in Emacs]]

#+begin_src elisp
(use-package easy-kill
  :config
  (map! "M-w" #'easy-kill)
)
#+end_src

** consult-dir

#+begin_src elisp
(use-package consult-dir
  :ensure t
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

** avy embark

#+begin_src elisp

(use-package! avy)
(defun avy-action-embark (pt)
  (unwind-protect
      (save-excursion
        (goto-char pt)
        (embark-act))
    (select-window
     (cdr (ring-ref avy-ring 0))))
  t)

(setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark)
#+end_src

** latex

#+begin_src elisp
(setq org-latex-packages-alist '(("" "tikz-cd" t) ("" "tikz" t)))
#+end_src

** dirvish

[[https://github.com/alexluigit/dirvish][GitHub - alexluigit/dirvish: Dired can be a nice file manager.]]

#+begin_src elisp
(use-package! dirvish
  :config
        (map!
         :leader
         :prefix ("d" . "dirvish")
         :nvm "d" #'dirvish-dired
         :nvm "f" #'dirvish)
        (map! :map dired-mode-map
        :localleader
        (:nvm "t" #'dirvish-toggle-fullscreen)))
#+end_src
** dumb-jump (new)

[[https://github.com/jacktasia/dumb-jump][GitHub - jacktasia/dumb-jump: an Emacs "jump to definition" package for 50+ l...]]

#+begin_src elisp
(use-package! dumb-jump
  :init
   (progn
     (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
     (setq xref-show-definitions-function #'xref-show-definitions-completing-read)
   ))
#+end_src

